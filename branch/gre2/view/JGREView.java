/*
 *
 * Copyright 2009 digma543
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * jGREView.java
 *
 */

/*
 * jGREView.java
 *
 * Created on 2009/6/28, 上午 12:02:55
 */
package jgre.view;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.EnumSet;
import java.util.Iterator;
import javax.swing.ActionMap;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import org.apache.log4j.Logger;
import util.Util;

/**
 *
 * @author digma543
 */
public class JGREView extends JFrame {

  private static Logger log = Logger.getLogger(JGREView.class);

  /** Creates new form jGREView */
  public JGREView() {
    initComponents();
    controller = new ViewController(this);
    initSubView();
  }

  private void initSubView() {
    EnumSet<ViewEnum> set = EnumSet.allOf(ViewEnum.class);
    for (Iterator<ViewEnum> it = set.iterator(); it.hasNext();) {
      ViewEnum v = it.next();
      try {
        Class<?> c = Class.forName(v.toString());
        Object obj = c.newInstance();
        for (Field f : c.getDeclaredFields()) {
          Annotation[] anns = f.getAnnotations();
          if (anns.length < 1) {
            continue;
          }
          for (Annotation ann : anns) {
            if (ann instanceof InjectController) {
              f.set(obj, controller);
            }
          }
        }
        controller.registSubView(v.toString(), (JPanel) obj);
      } catch (Exception ex) {
        log.warn(ex);
      }
    }
    controller.setFirstView(ViewEnum.FUNCTION.toString());
  }

  public void changView(String viewName) {
    controller.changeView(viewName);
    Util.setCenter(this);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {

    menuBar = new JMenuBar();
    JMenu fileMenu = new JMenu();
    JMenuItem exitMenuItem = new JMenuItem();
    toolMenu = new JMenu();
    environmentMenuItem = new JMenuItem();
    maintainUnitMenuItem = new JMenuItem();
    JMenu helpMenu = new JMenu();
    JMenuItem aboutMenuItem = new JMenuItem();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setLocationByPlatform(true);
    setName("Form"); 
    setResizable(false);

    menuBar.setName("menuBar"); 

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jgre.view.JGREApp.class).getContext().getResourceMap(JGREView.class);
    fileMenu.setText(resourceMap.getString("fileMenu.text")); 
    fileMenu.setName("fileMenu"); 

    ActionMap actionMap = org.jdesktop.application.Application.getInstance(jgre.view.JGREApp.class).getContext().getActionMap(JGREView.class, this);
    exitMenuItem.setAction(actionMap.get("quit")); 
    exitMenuItem.setName("exitMenuItem"); 
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    toolMenu.setText(resourceMap.getString("toolMenu.text")); 
    toolMenu.setName("toolMenu"); 

    environmentMenuItem.setAction(actionMap.get("showConfigurationView")); 
    environmentMenuItem.setText(resourceMap.getString("environmentMenuItem.text")); 
    environmentMenuItem.setName("environmentMenuItem"); 
    toolMenu.add(environmentMenuItem);

    maintainUnitMenuItem.setAction(actionMap.get("showMaintainUnitBox")); 
    maintainUnitMenuItem.setText(resourceMap.getString("maintainUnitMenuItem.text")); 
    maintainUnitMenuItem.setName("maintainUnitMenuItem"); 
    toolMenu.add(maintainUnitMenuItem);

    menuBar.add(toolMenu);

    helpMenu.setText(resourceMap.getString("helpMenu.text")); 
    helpMenu.setName("helpMenu"); 

    aboutMenuItem.setAction(actionMap.get("showAboutBox")); 
    aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); 
    aboutMenuItem.setName("aboutMenuItem"); 
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>
  // Variables declaration - do not modify
  private JMenuItem environmentMenuItem;
  private JMenuItem maintainUnitMenuItem;
  private JMenuBar menuBar;
  private JMenu toolMenu;
  // End of variables declaration
  private ViewController controller;
}
