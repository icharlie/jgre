/*
 * Copyright 2009 digman543
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * GRESearchPanel.java
 */
package gre.view;

import gre.utility.GRESearch;
import gre.utility.Voice;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Map;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jdesktop.application.Action;

/**
 *
 * @author digman543
 */
public class GRESearchPanel extends javax.swing.JPanel {

  /** Creates new form GRESearchPanel */
  public GRESearchPanel() {
    rootNode = new DefaultMutableTreeNode();
    vocabularyNode = new DefaultMutableTreeNode("字彙", true);
    antonymNode = new DefaultMutableTreeNode("反義", true);
    analogyNode = new DefaultMutableTreeNode("類比", true);
    rootNode.add(vocabularyNode);
    rootNode.add(antonymNode);
    rootNode.add(analogyNode);
    analogyNode.setAllowsChildren(true);
    model = new DefaultTreeModel(rootNode);
    initComponents();

  }

  @Action
  public void search() {
    String vocabulary = vocabularyText.getText();
    if (!vocabulary.equals("")) {
      vocabularyNode.removeAllChildren();
      antonymNode.removeAllChildren();
      analogyNode.removeAllChildren();
      model.reload();
      // Vocabulary
      List<Map<String, Object>> resultList = gs.searchVocabulary(vocabulary, absoluteMatchCheckBox.isSelected());
      for (Map<String, Object> element : resultList) {
        String unit = (String) element.get("unit");
        String eng_1 = (String) element.get("eng_1");
        String chinese_1 = (String) element.get("chinese_1");
        String format = "(".concat(unit).concat(")\t").concat(eng_1).concat("\t(").concat(chinese_1).concat(")");
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(format);
        vocabularyNode.insert(node, vocabularyNode.getChildCount());
      }
      // Antonym
      resultList = gs.searchAntonym(vocabulary, absoluteMatchCheckBox.isSelected());
      for (Map<String, Object> element : resultList) {
        String unit = (String) element.get("unit");
        String eng_1 = (String) element.get("eng_1");
        String eng_2 = (String) element.get("eng_2");
        String chinese_1 = (String) element.get("chinese_1");
        String chinese_2 = (String) element.get("chinese_2");
        String format = "(".concat(unit).concat(")\t").concat(eng_1).concat("<>").concat(eng_2).concat("\t(").concat(chinese_1).concat("<>").concat(chinese_2).concat(")");
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(format);
        antonymNode.add(node);
      }
      // Analogy
      resultList = gs.searchAnalogy(vocabulary, absoluteMatchCheckBox.isSelected());
      for (Map<String, Object> element : resultList) {
        String unit = (String) element.get("unit");
        String eng_1 = (String) element.get("eng_1");
        String eng_2 = (String) element.get("eng_2");
        String eng_3 = (String) element.get("eng_3");
        String eng_4 = (String) element.get("eng_4");
        String chinese_1 = (String) element.get("chinese_1");
        String chinese_2 = (String) element.get("chinese_2");
        String chinese_3 = (String) element.get("chinese_3");
        String chinese_4 = (String) element.get("chinese_4");
        String format = "(".concat(unit).concat(")\t").concat(eng_1).concat(" : ").concat(eng_2).concat(" = ").concat(eng_3).concat(" : ").concat(eng_4).concat("\t(").concat(chinese_1).concat(":").concat(chinese_2).concat("=").concat(chinese_3).concat(":").concat(chinese_4).concat(")");
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(format);
        analogyNode.add(node);
      }
      resultTree.repaint();
      if (isExpand) {
        explandAll();
      }
    }
  }

  private void explandAll() {
    for (int i = resultTree.getRowCount(); i > -1; --i) {
      resultTree.expandRow(i);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    vocabularyLabel = new javax.swing.JLabel();
    vocabularyText = new javax.swing.JTextField();
    absoluteMatchCheckBox = new javax.swing.JCheckBox();
    searchButton = new javax.swing.JButton();
    ResultScrollPane = new javax.swing.JScrollPane();
    resultTree = new javax.swing.JTree();
    expandButton = new javax.swing.JButton();
    collapseButton = new javax.swing.JButton();
    voiceButton = new javax.swing.JButton();

    setName("Form"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gre.view.GREApp.class).getContext().getResourceMap(GRESearchPanel.class);
    vocabularyLabel.setFont(resourceMap.getFont("vocabularyLabel.font")); // NOI18N
    vocabularyLabel.setText(resourceMap.getString("vocabularyLabel.text")); // NOI18N
    vocabularyLabel.setName("vocabularyLabel"); // NOI18N

    vocabularyText.setText(resourceMap.getString("vocabularyText.text")); // NOI18N
    vocabularyText.setName("vocabularyText"); // NOI18N
    vocabularyText.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        vocabularyTextKeyPressed(evt);
      }
    });

    absoluteMatchCheckBox.setFont(resourceMap.getFont("absoluteMatchCheckBox.font")); // NOI18N
    absoluteMatchCheckBox.setText(resourceMap.getString("absoluteMatchCheckBox.text")); // NOI18N
    absoluteMatchCheckBox.setName("absoluteMatchCheckBox"); // NOI18N

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(gre.view.GREApp.class).getContext().getActionMap(GRESearchPanel.class, this);
    searchButton.setAction(actionMap.get("search")); // NOI18N
    searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
    searchButton.setName("searchButton"); // NOI18N

    ResultScrollPane.setName("ResultScrollPane"); // NOI18N

    resultTree.setFont(resourceMap.getFont("resultTree.font")); // NOI18N
    resultTree.setModel(model);
    resultTree.setName("resultTree"); // NOI18N
    resultTree.setRootVisible(false);
    resultTree.setRowHeight(30);
    resultTree.setScrollsOnExpand(true);
    resultTree.setToggleClickCount(1);
    ResultScrollPane.setViewportView(resultTree);

    expandButton.setText(resourceMap.getString("expandButton.text")); // NOI18N
    expandButton.setName("expandButton"); // NOI18N
    expandButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        expandButtonActionPerformed(evt);
      }
    });

    collapseButton.setText(resourceMap.getString("collapseButton.text")); // NOI18N
    collapseButton.setName("collapseButton"); // NOI18N
    collapseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        collapseButtonActionPerformed(evt);
      }
    });

    voiceButton.setText(resourceMap.getString("voiceButton.text")); // NOI18N
    voiceButton.setName("voiceButton"); // NOI18N
    voiceButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        voiceButtonActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(layout.createSequentialGroup()
            .add(40, 40, 40)
            .add(vocabularyLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(vocabularyText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 201, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(absoluteMatchCheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(searchButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(expandButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(collapseButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(voiceButton))
          .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(ResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)))
        .add(31, 31, 31))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(25, 25, 25)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(vocabularyLabel)
          .add(vocabularyText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(absoluteMatchCheckBox)
          .add(searchButton)
          .add(expandButton)
          .add(collapseButton)
          .add(voiceButton))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(ResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
        .addContainerGap())
    );

    vocabularyText.setAction(actionMap.get("search"));
  }// </editor-fold>//GEN-END:initComponents

    private void expandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandButtonActionPerformed
      isExpand = true;
      explandAll();
    }//GEN-LAST:event_expandButtonActionPerformed

    private void collapseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseButtonActionPerformed
      isExpand = false;
      for (int i = 0, end = resultTree.getRowCount(); i < end; i++) {
        resultTree.collapseRow(i);
      }
    }//GEN-LAST:event_collapseButtonActionPerformed

    private void voiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voiceButtonActionPerformed
      voice.play(vocabularyText.getText());
    }//GEN-LAST:event_voiceButtonActionPerformed

    private void vocabularyTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vocabularyTextKeyPressed
      if (evt.isMetaDown() && evt.isAltDown() && evt.getKeyCode() == KeyEvent.VK_V) {
        voice.play(vocabularyText.getText());
      }
    }//GEN-LAST:event_vocabularyTextKeyPressed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane ResultScrollPane;
  private javax.swing.JCheckBox absoluteMatchCheckBox;
  private javax.swing.JButton collapseButton;
  private javax.swing.JButton expandButton;
  private javax.swing.JTree resultTree;
  private javax.swing.JButton searchButton;
  private javax.swing.JLabel vocabularyLabel;
  private javax.swing.JTextField vocabularyText;
  private javax.swing.JButton voiceButton;
  // End of variables declaration//GEN-END:variables
  private DefaultTreeModel model;
  private DefaultMutableTreeNode rootNode;
  private DefaultMutableTreeNode vocabularyNode;
  private DefaultMutableTreeNode antonymNode;
  private DefaultMutableTreeNode analogyNode;
  private final GRESearch gs = new GRESearch();
  private boolean isExpand = false;
  private final Voice voice = Voice.getSingleVoice();
}
