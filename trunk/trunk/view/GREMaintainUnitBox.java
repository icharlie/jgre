/*
 * Copyright 2009 digman543
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * GREMaintainUnitBox.java
 */
package gre.view;

import gre.database.AccessDataBaseTool;
import gre.database.DataBaseTool;
import gre.utility.AnalogyEnum;
import gre.utility.AntonymEnum;
import gre.utility.ExamTypesEnum;
import gre.utility.VocabularyEnum;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.jdesktop.application.Action;

/**
 * Use to add or delete units.
 * @author digman543
 */
public class GREMaintainUnitBox extends javax.swing.JDialog {

  /** Creates new form GREMaintainUnitBox */
  public GREMaintainUnitBox(java.awt.Frame parent) {
    super(parent);
    dbTool = AccessDataBaseTool.getAccessDataBaseTool();
    initComponents();
    getRootPane().setDefaultButton(exitButton);
  }

  @Action
  public void closeIncreseUnit() {
    stateLabel.setText("");
    deleteStateLable.setText("");
    dispose();
  }

  private boolean checkUnit() {
    boolean isDupe = false;
    stateLabel.setText("");
  String newUnit = unitText.getText();
    Set<String> units = null;
    if (!newUnit.equals("")) {
      if (examTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANTONYM.ordinal()) {
        units = dbTool.getAntonymUnits();
      } else if (examTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANALOGY.ordinal()) {
        units = dbTool.getAnalogyUnits();
      } else {
        units = dbTool.getVocabularyUnits();
      }
      for (String unit : units) {
        if (unit.equals(newUnit)) {
          stateLabel.setForeground(new Color(255, 0, 0));
          stateLabel.setText(newUnit.concat("單元重覆"));
          isDupe = true;
          break;
        }
      }
    }
    return !isDupe;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainTabbedPanel = new javax.swing.JTabbedPane();
    addPanel = new javax.swing.JPanel();
    unitLabel = new javax.swing.JLabel();
    filePathLabel = new javax.swing.JLabel();
    symbolLabel = new javax.swing.JLabel();
    unitText = new javax.swing.JTextField();
    filePathText = new javax.swing.JTextField();
    openButton = new javax.swing.JButton();
    symbolText = new javax.swing.JTextField();
    confirmButton = new javax.swing.JButton();
    infoLabel = new javax.swing.JLabel();
    exitButton = new javax.swing.JButton();
    stateLabel = new javax.swing.JLabel();
    EnumSet<ExamTypesEnum> types = EnumSet.range(ExamTypesEnum.ANTONYM, ExamTypesEnum.VOCABULARY);
    addExamTypeComboBox = new javax.swing.JComboBox(types.toArray());
    addTypeLabel = new javax.swing.JLabel();
    deletePanel = new javax.swing.JPanel();
    unitComboBox = new javax.swing.JComboBox();
    deleteButton = new javax.swing.JButton();
    deleteInfoLable = new javax.swing.JLabel();
    deleteStateLable = new javax.swing.JLabel();
    examTypeComboBox = new javax.swing.JComboBox(types.toArray());
    typeLabel = new javax.swing.JLabel();
    deleteunitLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setModal(true);
    setName("maintainUnitBox"); // NOI18N
    setResizable(false);

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gre.view.GREApp.class).getContext().getResourceMap(GREMaintainUnitBox.class);
    mainTabbedPanel.setFont(resourceMap.getFont("mainTabbedPanel.font")); // NOI18N
    mainTabbedPanel.setName("mainTabbedPanel"); // NOI18N

    addPanel.setName("addPanel"); // NOI18N

    unitLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    unitLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    unitLabel.setText(resourceMap.getString("unitLabel.text")); // NOI18N
    unitLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    unitLabel.setName("unitLabel"); // NOI18N

    filePathLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    filePathLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    filePathLabel.setText(resourceMap.getString("filePathLabel.text")); // NOI18N
    filePathLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    filePathLabel.setName("filePathLabel"); // NOI18N

    symbolLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    symbolLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    symbolLabel.setText(resourceMap.getString("symbolLabel.text")); // NOI18N
    symbolLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    symbolLabel.setName("symbolLabel"); // NOI18N

    unitText.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    unitText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
    unitText.setText(resourceMap.getString("unitText.text")); // NOI18N
    unitText.setToolTipText(resourceMap.getString("unitText.toolTipText")); // NOI18N
    unitText.setName("unitText"); // NOI18N
    unitText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        unitTextFocusLost(evt);
      }
    });

    filePathText.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    filePathText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
    filePathText.setText(resourceMap.getString("filePathText.text")); // NOI18N
    filePathText.setToolTipText(resourceMap.getString("filePathText.toolTipText")); // NOI18N
    filePathText.setName("filePathText"); // NOI18N

    openButton.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    openButton.setText(resourceMap.getString("openButton.text")); // NOI18N
    openButton.setName("openButton"); // NOI18N
    openButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openButtonActionPerformed(evt);
      }
    });

    symbolText.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    symbolText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    symbolText.setText(resourceMap.getString("symbolText.text")); // NOI18N
    symbolText.setToolTipText(resourceMap.getString("symbolText.toolTipText")); // NOI18N
    symbolText.setName("symbolText"); // NOI18N

    confirmButton.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    confirmButton.setText(resourceMap.getString("confirmButton.text")); // NOI18N
    confirmButton.setName("confirmButton"); // NOI18N
    confirmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        confirmButtonActionPerformed(evt);
      }
    });

    infoLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    infoLabel.setText(resourceMap.getString("infoLabel.text")); // NOI18N
    infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    infoLabel.setName("infoLabel"); // NOI18N

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(gre.view.GREApp.class).getContext().getActionMap(GREMaintainUnitBox.class, this);
    exitButton.setAction(actionMap.get("closeIncreseUnit")); // NOI18N
    exitButton.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    exitButton.setText(resourceMap.getString("exitButton.text")); // NOI18N
    exitButton.setName("exitButton"); // NOI18N

    stateLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    stateLabel.setForeground(resourceMap.getColor("stateLabel.foreground")); // NOI18N
    stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    stateLabel.setText(resourceMap.getString("stateLabel.text")); // NOI18N
    stateLabel.setName("stateLabel"); // NOI18N

    addExamTypeComboBox.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    addExamTypeComboBox.setName("addExamTypeComboBox"); // NOI18N
    addExamTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addExamTypeComboBoxActionPerformed(evt);
      }
    });

    addTypeLabel.setFont(resourceMap.getFont("unitLabel.font")); // NOI18N
    addTypeLabel.setText(resourceMap.getString("addTypeLabel.text")); // NOI18N
    addTypeLabel.setName("addTypeLabel"); // NOI18N

    org.jdesktop.layout.GroupLayout addPanelLayout = new org.jdesktop.layout.GroupLayout(addPanel);
    addPanel.setLayout(addPanelLayout);
    addPanelLayout.setHorizontalGroup(
      addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(addPanelLayout.createSequentialGroup()
        .addContainerGap()
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(addPanelLayout.createSequentialGroup()
            .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(addPanelLayout.createSequentialGroup()
                .add(filePathLabel)
                .add(9, 9, 9)
                .add(filePathText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(openButton))
              .add(addPanelLayout.createSequentialGroup()
                .add(symbolLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(symbolText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
          .add(org.jdesktop.layout.GroupLayout.TRAILING, addPanelLayout.createSequentialGroup()
            .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
              .add(org.jdesktop.layout.GroupLayout.LEADING, addPanelLayout.createSequentialGroup()
                .add(addTypeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addExamTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
              .add(addPanelLayout.createSequentialGroup()
                .add(unitLabel)
                .add(42, 42, 42)
                .add(unitText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
            .add(176, 176, 176))
          .add(addPanelLayout.createSequentialGroup()
            .add(infoLabel)
            .add(42, 42, 42)
            .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(addPanelLayout.createSequentialGroup()
                .add(confirmButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(exitButton))
              .add(stateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 273, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(62, Short.MAX_VALUE))))
    );
    addPanelLayout.setVerticalGroup(
      addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, addPanelLayout.createSequentialGroup()
        .add(25, 25, 25)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(addTypeLabel)
          .add(addExamTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(unitText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(unitLabel))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(filePathLabel)
          .add(filePathText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(openButton))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(symbolLabel)
          .add(symbolText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(infoLabel)
          .add(stateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(addPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(confirmButton)
          .add(exitButton))
        .add(29, 29, 29))
    );

    examTypeComboBox.setSelectedIndex(0);

    mainTabbedPanel.addTab("新增單元", addPanel);

    deletePanel.setName("deletePanel"); // NOI18N

    unitComboBox.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    unitComboBox.setName("unitComboBox"); // NOI18N

    deleteButton.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
    deleteButton.setName("deleteButton"); // NOI18N
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteButtonActionPerformed(evt);
      }
    });

    deleteInfoLable.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    deleteInfoLable.setText(resourceMap.getString("deleteInfoLable.text")); // NOI18N
    deleteInfoLable.setName("deleteInfoLable"); // NOI18N

    deleteStateLable.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    deleteStateLable.setText(resourceMap.getString("deleteStateLable.text")); // NOI18N
    deleteStateLable.setName("deleteStateLable"); // NOI18N

    examTypeComboBox.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    examTypeComboBox.setName("examTypeComboBox"); // NOI18N
    examTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        examTypeComboBoxActionPerformed(evt);
      }
    });

    typeLabel.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    typeLabel.setText(resourceMap.getString("typeLabel.text")); // NOI18N
    typeLabel.setName("typeLabel"); // NOI18N

    deleteunitLabel.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    deleteunitLabel.setText(resourceMap.getString("deleteunitLabel.text")); // NOI18N
    deleteunitLabel.setName("deleteunitLabel"); // NOI18N

    org.jdesktop.layout.GroupLayout deletePanelLayout = new org.jdesktop.layout.GroupLayout(deletePanel);
    deletePanel.setLayout(deletePanelLayout);
    deletePanelLayout.setHorizontalGroup(
      deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(deletePanelLayout.createSequentialGroup()
        .addContainerGap()
        .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(deletePanelLayout.createSequentialGroup()
            .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
              .add(deleteunitLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .add(typeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
              .add(org.jdesktop.layout.GroupLayout.LEADING, examTypeComboBox, 0, 181, Short.MAX_VALUE)
              .add(org.jdesktop.layout.GroupLayout.LEADING, unitComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
          .add(deletePanelLayout.createSequentialGroup()
            .add(deleteInfoLable)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(deleteButton)
              .add(deleteStateLable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))))
        .add(194, 194, 194))
    );
    deletePanelLayout.setVerticalGroup(
      deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(deletePanelLayout.createSequentialGroup()
        .add(16, 16, 16)
        .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(examTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(typeLabel))
        .add(16, 16, 16)
        .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(unitComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(deleteunitLabel))
        .add(20, 20, 20)
        .add(deletePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(deleteInfoLable)
          .add(deleteStateLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(deleteButton)
        .addContainerGap(99, Short.MAX_VALUE))
    );

    examTypeComboBox.setSelectedIndex(0);

    mainTabbedPanel.addTab("刪除單元", deletePanel);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(mainTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(mainTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void resetUnitComboBox() {
    unitComboBox.removeAllItems();
    Set<String> units = null;
    if (examTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANTONYM.ordinal()) {
      units = dbTool.getAntonymUnits();
    } else if (examTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANALOGY.ordinal()) {
      units = dbTool.getAnalogyUnits();
    } else {
      units = dbTool.getVocabularyUnits();
    }
    for (String unit : units) {
      unitComboBox.addItem(unit);
    }
    unitComboBox.repaint();
  }

    private void unitTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitTextFocusLost
      checkUnit();
    }//GEN-LAST:event_unitTextFocusLost

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
      stateLabel.setText("");
      stateLabel.setForeground(new Color(255, 0, 0));
      String unit = unitText.getText();
      if (unit.equals("")) {
        stateLabel.setText("沒有輸入單元名稱！");
        return;
      }
      if (checkUnit()) {
        BufferedReader br = null;
        try {
          boolean isSuccess = false;
          // start deliver data
          File file = new File(filePathText.getText());
          br = new BufferedReader(new FileReader(file));
          // split by this symbol
          String symbol = symbolText.getText();
          List<Object[]> vocabularyList = new ArrayList<Object[]>();
          String line = null;
          if (addExamTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANTONYM.ordinal()) {
            while ((line = br.readLine()) != null) {
              Object[] element = new Object[AntonymEnum.values().length];
              element[AntonymEnum.INDEX.ordinal()] = null;
              element[AntonymEnum.UNIT.ordinal()] = unit;
              element[AntonymEnum.ENG_1.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AntonymEnum.ENG_2.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AntonymEnum.CHINESE_1.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AntonymEnum.CHINESE_2.ordinal()] = line.substring(0, line.length()).trim();
              element[AntonymEnum.NOTE.ordinal()] = null;
              element[AntonymEnum.ERROR.ordinal()] = null;
              vocabularyList.add(element);
            }
            isSuccess = dbTool.addNewUnit(AccessDataBaseTool.ANTONYM_TABLE_NAME, vocabularyList);
          } else if (addExamTypeComboBox.getSelectedIndex() == ExamTypesEnum.ANALOGY.ordinal()) {
            while ((line = br.readLine()) != null) {
              Object[] element = new Object[AnalogyEnum.values().length];
              element[AnalogyEnum.INDEX.ordinal()] = null;
              element[AnalogyEnum.UNIT.ordinal()] = unit;
              element[AnalogyEnum.ENG_1.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.ENG_2.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.ENG_3.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.ENG_4.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.CHINESE_1.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.CHINESE_2.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.CHINESE_3.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              line = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[AnalogyEnum.CHINESE_4.ordinal()] = line.substring(0, line.length()).trim();
              element[AnalogyEnum.NOTE.ordinal()] = null;
              element[AnalogyEnum.ERROR.ordinal()] = null;
              vocabularyList.add(element);
            }
            isSuccess = dbTool.addNewUnit(AccessDataBaseTool.ANALOGY_TABLE_NAME, vocabularyList);
          } else {
            while ((line = br.readLine()) != null) {
              Object[] element = new Object[VocabularyEnum.values().length];
              element[VocabularyEnum.INDEX.ordinal()] = null;
              element[VocabularyEnum.UNIT.ordinal()] = unit;
              element[VocabularyEnum.ENG_1.ordinal()] = line.substring(0, line.indexOf(symbol)).trim();
              element[VocabularyEnum.CHINESE_1.ordinal()] = line.substring(line.indexOf(symbol) + 1, line.length()).trim();
              element[VocabularyEnum.MEMO.ordinal()] = null;
              element[VocabularyEnum.ERROR.ordinal()] = null;
              vocabularyList.add(element);
            }
            isSuccess = dbTool.addNewUnit(AccessDataBaseTool.VOCABULARY_TABLE_NAME, vocabularyList);
          }

          if (isSuccess) {
            stateLabel.setForeground(new Color(0, 0, 255));
            stateLabel.setText(unit.concat("單元新增成功"));
            resetUnitComboBox();
          } else {
            stateLabel.setForeground(new Color(255, 0, 0));
            stateLabel.setText(unit.concat("單元新增失敗"));
          }
        } catch (IOException ex) {
          System.err.println(ex.getMessage());
          stateLabel.setForeground(new Color(255, 0, 0));
          stateLabel.setText(unit.concat("找不到檔案"));
        } finally {
          try {
            br.close();
          } catch (IOException ex) {
            System.err.println(ex.getMessage());
          }
        }
      }
}//GEN-LAST:event_confirmButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
      JFileChooser fileChooser = new JFileChooser();
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      int returnVal = fileChooser.showOpenDialog(this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
          filePathText.setText(fileChooser.getSelectedFile().getCanonicalPath());
        } catch (IOException ex) {
          Logger.getLogger(GREMaintainUnitBox.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_openButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      deleteStateLable.setText("");
      int index = examTypeComboBox.getSelectedIndex();
      String tableName = null;
      if (index == ExamTypesEnum.ANTONYM.ordinal()) {
        tableName = AccessDataBaseTool.ANTONYM_TABLE_NAME;
      } else if (index == ExamTypesEnum.ANALOGY.ordinal()) {
        tableName = AccessDataBaseTool.ANALOGY_TABLE_NAME;
      } else {
        tableName = AccessDataBaseTool.VOCABULARY_TABLE_NAME;
      }
      String unitName = (String) unitComboBox.getSelectedItem();
      if (dbTool.deleteNewUnit(tableName, unitName)) {
        deleteStateLable.setForeground(new Color(0, 0, 255));
        deleteStateLable.setText(unitName.concat("刪除成功!"));
        resetUnitComboBox();
      } else {
        deleteStateLable.setForeground(new Color(255, 0, 0));
        deleteStateLable.setText(unitName.concat("刪除失敗!"));
      }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void examTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examTypeComboBoxActionPerformed
      unitComboBox.removeAllItems();
      int index = examTypeComboBox.getSelectedIndex();
      Set<String> units = null;
      if (index == ExamTypesEnum.ANTONYM.ordinal()) {
        units = dbTool.getAntonymUnits();
      } else if (index == ExamTypesEnum.ANALOGY.ordinal()) {
        units = dbTool.getAnalogyUnits();
      } else {
        units = dbTool.getVocabularyUnits();
      }
      for (Iterator<String> it = units.iterator(); it.hasNext();) {
        unitComboBox.addItem(it.next());
      }

    }//GEN-LAST:event_examTypeComboBoxActionPerformed

    private void addExamTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExamTypeComboBoxActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_addExamTypeComboBoxActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox addExamTypeComboBox;
  private javax.swing.JPanel addPanel;
  private javax.swing.JLabel addTypeLabel;
  private javax.swing.JButton confirmButton;
  private javax.swing.JButton deleteButton;
  private javax.swing.JLabel deleteInfoLable;
  private javax.swing.JPanel deletePanel;
  private javax.swing.JLabel deleteStateLable;
  private javax.swing.JLabel deleteunitLabel;
  private javax.swing.JComboBox examTypeComboBox;
  private javax.swing.JButton exitButton;
  private javax.swing.JLabel filePathLabel;
  private javax.swing.JTextField filePathText;
  private javax.swing.JLabel infoLabel;
  private javax.swing.JTabbedPane mainTabbedPanel;
  private javax.swing.JButton openButton;
  private javax.swing.JLabel stateLabel;
  private javax.swing.JLabel symbolLabel;
  private javax.swing.JTextField symbolText;
  private javax.swing.JLabel typeLabel;
  private javax.swing.JComboBox unitComboBox;
  private javax.swing.JLabel unitLabel;
  private javax.swing.JTextField unitText;
  // End of variables declaration//GEN-END:variables
  private final DataBaseTool dbTool;
}
