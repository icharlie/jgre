/*
 * Copyright 2010 digman543
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * GREReviewPanel.java
 */
package gre.view;

import gre.database.AccessDataBaseTool;
import gre.database.DataBaseTool;
import gre.utility.VocabularyEnum;
import gre.utility.Voice;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author digman543
 */
public class GREReviewPanel extends javax.swing.JPanel {

  /** Creates new form ReviewPanel */
  public GREReviewPanel() {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    reviewScrolPanel = new javax.swing.JScrollPane();
    reviewTable = new javax.swing.JTable();
    unitComboBox = new javax.swing.JComboBox(databaseTool.getVocabularyUnits().toArray());
    searchButton = new javax.swing.JButton();
    showExplainCheckBox = new javax.swing.JCheckBox();
    cleanButton = new javax.swing.JButton();
    forgetfulCheckBox = new javax.swing.JCheckBox();

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gre.view.GREApp.class).getContext().getResourceMap(GREReviewPanel.class);
    setFont(resourceMap.getFont("reviewPanel.font")); // NOI18N
    setName("reviewPanel"); // NOI18N

    reviewScrolPanel.setName("reviewScrolPanel"); // NOI18N

    reviewTable.setFont(resourceMap.getFont("reviewTable.font")); // NOI18N
    reviewTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "發音", "編號","單字", "字義"
      }
    ) {
      Class[] types = new Class [] {
        javax.swing.Icon.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    reviewTable.setColumnSelectionAllowed(true);
    reviewTable.setName("reviewTable"); // NOI18N
    reviewTable.setRowHeight(20);
    reviewTable.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        reviewTableKeyReleased(evt);
      }
    });
    reviewTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        reviewTableMousePressed(evt);
      }
    });
    reviewScrolPanel.setViewportView(reviewTable);
    reviewTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    reviewTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("reviewTable.columnModel.title0")); // NOI18N
    reviewTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("reviewTable.columnModel.title1")); // NOI18N
    reviewTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("reviewTable.columnModel.title2")); // NOI18N
    reviewTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("reviewTable.columnModel.title3")); // NOI18N
    reviewTable.setRowHeight(25);
    reviewTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    unitComboBox.setFont(resourceMap.getFont("unitComboBox.font")); // NOI18N
    unitComboBox.setName("unitComboBox"); // NOI18N

    searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
    searchButton.setName("searchButton"); // NOI18N
    searchButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        searchButtonActionPerformed(evt);
      }
    });

    showExplainCheckBox.setText(resourceMap.getString("showExplainCheckBox.text")); // NOI18N
    showExplainCheckBox.setName("showExplainCheckBox"); // NOI18N
    showExplainCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        showExplainCheckBoxActionPerformed(evt);
      }
    });

    cleanButton.setText(resourceMap.getString("cleanButton.text")); // NOI18N
    cleanButton.setName("cleanButton"); // NOI18N
    cleanButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cleanButtonActionPerformed(evt);
      }
    });

    forgetfulCheckBox.setText(resourceMap.getString("forgetfulCheckBox.text")); // NOI18N
    forgetfulCheckBox.setName("forgetfulCheckBox"); // NOI18N

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(unitComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(searchButton)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(cleanButton)
        .addContainerGap(437, Short.MAX_VALUE))
      .add(layout.createSequentialGroup()
        .add(25, 25, 25)
        .add(showExplainCheckBox)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(forgetfulCheckBox)
        .addContainerGap(590, Short.MAX_VALUE))
      .add(reviewScrolPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(unitComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(searchButton)
          .add(cleanButton))
        .add(4, 4, 4)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(showExplainCheckBox)
          .add(forgetfulCheckBox))
        .add(18, 18, 18)
        .add(reviewScrolPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
    );

    searchButton.getAccessibleContext().setAccessibleDescription(resourceMap.getString("searchButton.AccessibleContext.accessibleDescription")); // NOI18N
  }// </editor-fold>//GEN-END:initComponents

  private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
    String unit = (String) unitComboBox.getSelectedItem();
    boolean isShowExplain = showExplainCheckBox.isSelected();
    if (unit == null || unit.equals("")) {
      return;
    }
    ResourceMap resourceMap = Application.getInstance(GREApp.class).getContext().getResourceMap(GREReviewPanel.class);
    Icon voiceIcon = resourceMap.getIcon("voice.icon");
    wordList = databaseTool.getAllVacabulary(unit, forgetfulCheckBox.isSelected());
    DefaultTableModel model = (DefaultTableModel) reviewTable.getModel();
    for (int row = model.getRowCount() - 1; row > -1; row--) {
      model.removeRow(row);
    }
    int serialNumber = 1;
    for (String[] vocabularyData : wordList) {
      String explain = isShowExplain ? vocabularyData[VocabularyEnum.CHINESE_1.ordinal()] : "";
      Object[] datas = new Object[]{voiceIcon, serialNumber++,vocabularyData[VocabularyEnum.ENG_1.ordinal()], explain};
      model.addRow(datas);
    }
  }//GEN-LAST:event_searchButtonActionPerformed

  private void showExplainCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExplainCheckBoxActionPerformed
    if (reviewTable.getRowCount() < 1) {
      return;
    }
    DefaultTableModel model = (DefaultTableModel) reviewTable.getModel();
    boolean isShowExplain = showExplainCheckBox.isSelected();
    for (int row = 0, end = wordList.size(); row < end; row++) {
      String explain = isShowExplain ? wordList.get(row)[VocabularyEnum.CHINESE_1.ordinal()] : "";
      model.setValueAt(explain, row, 3);
    }
  }//GEN-LAST:event_showExplainCheckBoxActionPerformed

  private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
    DefaultTableModel model = (DefaultTableModel) reviewTable.getModel();
    for (int row = model.getRowCount() - 1; row > -1; row--) {
      model.removeRow(row);
    }
  }//GEN-LAST:event_cleanButtonActionPerformed

  private void reviewTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviewTableMousePressed
    commonEvent();
  }//GEN-LAST:event_reviewTableMousePressed

  private void reviewTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reviewTableKeyReleased
    if (KeyEvent.VK_SPACE == evt.getKeyCode()) {
      commonEvent();
    }
    JTabbedPane mainTabbedPane = (JTabbedPane) this.getParent();
    if (evt.isMetaDown()) {
      switch (evt.getKeyCode()) {
        case KeyEvent.VK_3:
          mainTabbedPane.setSelectedIndex(2);
          break;
        case KeyEvent.VK_1:
          mainTabbedPane.setSelectedIndex(0);
          break;
      }
    }
  }//GEN-LAST:event_reviewTableKeyReleased

  /**
   * When user use mouse or pressing space key, the event about what
   * the reviewTable should do. If user presses,keyborad or mouse, on voice column,
   * the method will call voice's object to play. If user presses on explain column,
   * it will display what the meaning about this word.
   */
  private void commonEvent() {
    DefaultTableModel model = (DefaultTableModel) reviewTable.getModel();
    int selectedRow = reviewTable.getSelectedRow();
    if (reviewTable.getSelectedColumn() == 3) {
      String explain = (String) model.getValueAt(selectedRow, 3);
      if (explain.equals("")) {
        model.setValueAt(wordList.get(selectedRow)[VocabularyEnum.CHINESE_1.ordinal()], selectedRow, 3);
      } else {
        model.setValueAt("", selectedRow, 3);
      }
    } else if (reviewTable.getSelectedColumn() == 0) {
      String vocabulary = (String) model.getValueAt(selectedRow, 2);
      voice.play(vocabulary);
    }
  }

  /**
   * Get unitComboBox in the GREReviewPanel
   * @return
   */
  protected JComboBox getUnitComboBox() {
    return unitComboBox;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cleanButton;
  private javax.swing.JCheckBox forgetfulCheckBox;
  private javax.swing.JScrollPane reviewScrolPanel;
  private javax.swing.JTable reviewTable;
  private javax.swing.JButton searchButton;
  private javax.swing.JCheckBox showExplainCheckBox;
  private javax.swing.JComboBox unitComboBox;
  // End of variables declaration//GEN-END:variables
  private transient DataBaseTool databaseTool = AccessDataBaseTool.getAccessDataBaseTool();
  private ArrayList<String[]> wordList;
  private Voice voice = Voice.getSingleVoice();
}
